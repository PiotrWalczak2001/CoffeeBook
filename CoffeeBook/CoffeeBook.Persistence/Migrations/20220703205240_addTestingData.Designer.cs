// <auto-generated />
using System;
using CoffeeBook.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeBook.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220703205240_addTestingData")]
    partial class addTestingData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeBook.Domain.Entities.Coffee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MachiningProcess")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OriginId")
                        .HasColumnType("int");

                    b.Property<int>("RoasterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RoastingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Variety")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OriginId");

                    b.HasIndex("RoasterId");

                    b.ToTable("Coffees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MachiningProcess = 0,
                            Name = "Testowa Kawa",
                            OriginId = 1,
                            RoasterId = 1,
                            RoastingDate = new DateTime(2022, 7, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            Type = 0,
                            Variety = "Bourbon, Mundo Novo, Catuai"
                        });
                });

            modelBuilder.Entity("CoffeeBook.Domain.Entities.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BrewedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BrewingTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("BrewingTypeEnum")
                        .HasColumnType("int");

                    b.Property<int>("CoffeeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeId");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrewedDate = new DateTime(2022, 7, 3, 22, 52, 40, 138, DateTimeKind.Local).AddTicks(9213),
                            BrewingTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BrewingTypeEnum = 0,
                            CoffeeId = 1,
                            Description = "Super opis super kawy",
                            Name = "Testowa notka"
                        },
                        new
                        {
                            Id = 2,
                            BrewedDate = new DateTime(2022, 7, 3, 22, 52, 40, 138, DateTimeKind.Local).AddTicks(9221),
                            BrewingTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BrewingTypeEnum = 1,
                            CoffeeId = 1,
                            Description = "Super opis super kawy2",
                            Name = "Testowa notka2"
                        },
                        new
                        {
                            Id = 3,
                            BrewedDate = new DateTime(2022, 7, 3, 22, 52, 40, 138, DateTimeKind.Local).AddTicks(9227),
                            BrewingTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BrewingTypeEnum = 4,
                            CoffeeId = 1,
                            Description = "Super opis super kawy3",
                            Name = "Testowa notka3"
                        });
                });

            modelBuilder.Entity("CoffeeBook.Domain.Entities.Origin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Origins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Brazil",
                            Region = "Mococa"
                        });
                });

            modelBuilder.Entity("CoffeeBook.Domain.Entities.Roaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roasters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Stockholm",
                            Country = "Sweden",
                            Name = "Johan & Nystrom"
                        });
                });

            modelBuilder.Entity("CoffeeBook.Domain.Entities.Coffee", b =>
                {
                    b.HasOne("CoffeeBook.Domain.Entities.Origin", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeBook.Domain.Entities.Roaster", "Roaster")
                        .WithMany()
                        .HasForeignKey("RoasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Origin");

                    b.Navigation("Roaster");
                });

            modelBuilder.Entity("CoffeeBook.Domain.Entities.Note", b =>
                {
                    b.HasOne("CoffeeBook.Domain.Entities.Coffee", "Coffee")
                        .WithMany()
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coffee");
                });
#pragma warning restore 612, 618
        }
    }
}
